{# le template hérite du template base.html.twig à la racine de templates#}
{% extends 'base.html.twig' %}

{# surcharge en ajoutant grace a {{ parent() }} du bloc title défini dans base.html.twig #}
{% block title %}{{ parent() }} - Twig{% endblock %}

{# surcharge ( en remplacement) du bloc body défini dans base.html.twig #}
{% block body %}

    {# création d'une variable #}
    {% set test = 'une varibale de test' %}

    <p>{{ test }}</p>
    {# concaténation avec tilde #}
    <p>{{ test ~ ' ! ' }}</p>

    {% if test != '' %}
        <p>test n'est pas vide</p>
    {% else %}
        <p>test est vide</p>
    {% endif %}

    {% set vrai = true %}
    {% set faux = false %}

    {#le not en toutes lettres : if(!$faux) #}
    {% if not faux %}
        <p>faux n'est pas vrai</p>
    {% endif %}
   ! {# and et or en toutes lettres : if ($vrai && $!faux#}
    {% if vrai and not faux %}
        <p>vrai est vrai et faux n'est pas vrai</p>
    {% endif %}



    {# LES BOUCLES #}

    {# un tableau indexé #}
    {% set tableau = ['a', 'b', 'c', 'd'] %}

    {# pour accéder à un élément d'un tableau #}
    {{ tableau[2] }}
    {# ou #}
    {{ tableau.2 }}
    <br>

    {# équivalent foreach($tableau as $lettre) #}
    {% for lettre in tableau %}
        {{  lettre }}<br>
    {%  endfor %}

    {# Tableau associatif #}
    {% set assoc = {nom:'Marx', prenom: 'Groucho', profession: 'Explorateur'} %}

    {# pour accéder à un élément d'un tableau associatif #}
    {{ assoc['nom'] }}
    {# ou #}
    {{ assoc.nom }}
    <br>

    {# foreach ($assoc as $key => $value) #}
    {% for key, value in assoc %}
        {{ key }} : {{ value }}
    {% endfor %}


    {%  set vide = [] %}

    {# on rentre dans le else d'un for si le tableau est vide #}
    {%  for element in vide %}
        {{ element }}<br>
    {% else %}
        <p>le tableau est vide</p>
    {% endfor %}


    {#
    loop est accessible dans toutes les boucles
    et donne l'information d'ou on en est dans la boucle
    #}
    {% for value in assoc %}
        Tour de boucle (index 1) : {{ loop.index }}<br>
        Tour de boucle (index 0) : {{ loop.index0 }}<br>

        {% if loop.first %}
            1er tour de boucle <br>
        {%  endif %}

        {% if loop.last %}
            Dernier tour de boucle <br>
        {%  endif %}

        {{ value }}<br>
    {% endfor %}

    {# pour créer un tableau en intervalle avec .. #}
    {% set chiffres = 0..9 %}

    {%  for chiffre in chiffres %}
        {{ chiffre }} <br>
    {% endfor %}

    {# for ($i = 0; $i<= 10, $i++) #}
    {% for i in 0..10 %}
        {{ i }} <br>
    {% endfor %}

    {# TESTS AVEC is ET is not #}

    {# if(isset($test)) #}
    {% if test is defined %}
        <p>La variable test existe</p>
    {% endif %}

    {# if (!empty($test)) #}
    {% if test is not empty %}
        <p>La variable test n'est pa vide</p>
    {% endif %}

    {% set dix = 10 %}

    {# if ($dix % 5 == 0) #}
    {% if dix is divisible by(5) %}
        <p>{{ dix }} est divisible par 5</p>
    {%  endif %}


    {# even et odd pour pair et impair#}
    {% if dix is even %}
         <p>{{ dix }} est pair</p>
    {% endif %}

    {% if dix is odd %}
        <p>{{ dix }} est impair</p>
    {% endif %}


    {# FILTRES AVEC PIPE | #}

    {# strtoupper($test) #}
    <p>{{ test|upper }}</p>

    {# la variable var est vide(empty) et default lui applique une valeur #}
    <p>{{ var|default('la variable est vide') }}</p>

    {# je peux cumuler les filtres #}
    <p>{{ var|default('la variable est vide')|upper }}</p>

    {# formatage de date #}
    <p>{{ '2020-06-03'|date('d/m/Y') }}</p>

    {# sur un objet DateTime(passé par le contrôleur) ici filtre #}
    <p>{{ demain|date('d/m/Y H:i') }}</p>

    {#
     équivalent de l'appel à la méthode format() de DateTime :
     $demain->format('d/m/Y H:i') ici appel a une méthode
     #}
    <p>{{ demain.format('d/m/Y H:i') }}</p>


    {% set paragraphe = '<p>Un paragraphe</p>' %}

    {# par défaut, le HTML est échappé en entités HTML #}
    {{ paragraphe }}

    {# pour que le html ne soit pas échappé on applique le filtre raw #}
    {{ paragraphe|raw }}

    {# inclusion d'un autre template :
    attention : chemin à partir de la racine du repertoire templates #}
    {% include 'twig/inclus.html.twig' %}

    {# Avec only l'autre templates n'aura pas acces aux variables venant de
     ce fichier #}
    {% include 'twig/inclus.html.twig' only %}

    {# le fichier inclus a aussi acces à une variable foo qui vaut BAR #}
    {% include 'twig/inclus.html.twig' with {foo: 'BAR'} %}

    {# le fichier inclus n'a acces qu'à une variable foo qui vaut BAR #}
    {% include 'twig/inclus.html.twig' with {foo: 'BAR'} only %}

    {# équivalent de var_dump() #}
    {{ dump(test) }}


{% endblock %}
